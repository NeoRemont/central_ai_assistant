import re
from datetime import datetime, timedelta
import payouts_module as payouts

# =============================
# Helpers
# =============================

def is_payouts_intent(text: str) -> bool:
    text = text.lower()
    return text.startswith("–≤—ã–ø–ª–∞—Ç") or text.startswith("–Ω–∞—á–∏—Å–ª") or text.startswith("–æ—Å—Ç–∞—Ç–æ–∫") or text.startswith("–æ—Ç—á—ë—Ç")

def parse_date(word: str) -> str:
    word = word.strip().lower()
    today = datetime.now()
    if word in ["—Å–µ–≥–æ–¥–Ω—è", "today"]:
        return today.strftime("%Y-%m-%d")
    if word in ["–≤—á–µ—Ä–∞", "yesterday"]:
        return (today - timedelta(days=1)).strftime("%Y-%m-%d")
    if word in ["–∑–∞–≤—Ç—Ä–∞", "tomorrow"]:
        return (today + timedelta(days=1)).strftime("%Y-%m-%d")
    # –§–æ—Ä–º–∞—Ç—ã DD.MM.YYYY –∏–ª–∏ YYYY-MM-DD
    try:
        if "." in word:
            return datetime.strptime(word, "%d.%m.%Y").strftime("%Y-%m-%d")
        if "-" in word:
            return datetime.strptime(word, "%Y-%m-%d").strftime("%Y-%m-%d")
    except Exception:
        return word
    return word

def route_command(text: str) -> str:
    txt = text.strip()
    low = txt.lower()

    if low.startswith("–≤—ã–ø–ª–∞—Ç"):
        # –§–æ—Ä–º–∞—Ç: –≤—ã–ø–ª–∞—Ç–∏ –î–∏–º–æ–Ω—É 200000 –ø–æ –ó–∞–≥–æ—Ä—è–Ω–∫–∞-–õ–∞–π—Ñ —Å–µ–≥–æ–¥–Ω—è
        m = re.match(r"–≤—ã–ø–ª–∞—Ç[–∞–∏]\s+(\S+)\s+(\d+)\s*(?:–ø–æ\s+([^\s]+))?\s*(.*)", txt, re.IGNORECASE)
        if not m:
            return "‚ùå –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–ª–∞—Ç—ã"
        emp, amt, obj, rest = m.groups()
        date = parse_date(rest) if rest else None
        res = payouts.add_payout(employee=emp, amount=float(amt), obj=obj, when=date)
        return f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {res}"

    if low.startswith("–Ω–∞—á–∏—Å–ª"):
        # –§–æ—Ä–º–∞—Ç: –Ω–∞—á–∏—Å–ª–∏ –†–∏–∑–æ 150000 –ø–æ –¢–∏—Ç–æ–≤–∞, –∞–∫—Ç ‚Ññ3
        m = re.match(r"–Ω–∞—á–∏—Å–ª[–∏]\s+(\S+)\s+(\d+)\s*–ø–æ\s+([^,]+)(?:,\s*–∞–∫—Ç\s*(.*))?", txt, re.IGNORECASE)
        if not m:
            return "‚ùå –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"
        emp, amt, obj, act = m.groups()
        res = payouts.add_accrual(employee=emp, amount=float(amt), obj=obj, act=act or "")
        return f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {res}"

    if low.startswith("–æ—Å—Ç–∞—Ç–æ–∫"):
        # –§–æ—Ä–º–∞—Ç: –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –î–∏–º–æ–Ω—É
        m = re.match(r"–æ—Å—Ç–∞—Ç–æ–∫\s+–ø–æ\s+(.+)", txt, re.IGNORECASE)
        if not m:
            return "‚ùå –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞—Ç–∫–∞"
        target = m.group(1)
        res = payouts.get_balance(target=target)
        return f"üìä –û—Å—Ç–∞—Ç–∫–∏: {res}"

    if low.startswith("–æ—Ç—á—ë—Ç"):
        # –§–æ—Ä–º–∞—Ç: –æ—Ç—á—ë—Ç –∑–∞ 2025-08
        m = re.match(r"–æ—Ç—á[–µ—ë]—Ç\s+(?:–∑–∞\s+)?(.+)", txt, re.IGNORECASE)
        if not m:
            return "‚ùå –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É –æ—Ç—á—ë—Ç–∞"
        period = m.group(1)
        res = payouts.get_report(period=period)
        return f"üìÑ –û—Ç—á—ë—Ç: {res}"

    return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
